// Draw an Icosahedron
// ECE4893/8893 Project 4
// C.V. Chaitanya Krishna

#include <iostream>
#include <math.h>
#include <GL/glut.h>
#include <GL/glext.h>
#include <GL/gl.h>
#include <GL/glu.h>

using namespace std;

#define NFACE 20
#define NVERTEX 12
#define X .525731112119133606 
#define Z .850650808352039932

static int updateRate = 10;
// These are the 12 vertices for the icosahedron
static GLfloat vdata[NVERTEX][3] = {    
   {-X, 0.0, Z}, {X, 0.0, Z}, {-X, 0.0, -Z}, {X, 0.0, -Z},    
   {0.0, Z, X}, {0.0, Z, -X}, {0.0, -Z, X}, {0.0, -Z, -X},    
   {Z, X, 0.0}, {-Z, X, 0.0}, {Z, -X, 0.0}, {-Z, -X, 0.0} 
};

// These are the 20 faces.  Each of the three entries for each 
// vertex gives the 3 vertices that make the face.
static GLint tindices[NFACE][3] = { 
   {0,4,1}, {0,9,4}, {9,5,4}, {4,5,8}, {4,8,1},    
   {8,10,1}, {8,3,10}, {5,3,8}, {5,2,3}, {2,7,3},    
   {7,10,3}, {7,6,10}, {7,11,6}, {11,0,6}, {0,1,6}, 
   {6,1,10}, {9,0,11}, {9,11,2}, {9,2,5}, {7,2,11} };

int testNumber; // Global variable indicating which test number is desired
long depth=0;
bool rotate=false;
long color;

void normalize(GLfloat v[3])
{
  GLfloat d = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
  v[0] /= d; v[1] /= d; v[2] /= d;
}

/*void color(int nf, int depth)
{
	long=csize=nf*pow(4,depth)
	int c1[csize];
	int c2[csize];
	int c3[csize];
	for (int i=0; i<csize; i++)
	{
		c1[i]=rand()%256;
		c2[i]=rand()%256;
		c3[i]=rand()%256;
	}
}*/

void drawIcos(GLfloat v1[3], GLfloat v2[3], GLfloat v3[3])
{
  // normalize vertices
  normalize(v1);
  normalize(v2);
  normalize(v3);

  // draw lines
  glColor3f(1.0,1.0,1.0);
  glBegin(GL_LINE_LOOP);  
  glVertex3fv(v1); 
  glVertex3fv(v2); 
  glVertex3fv(v3); 
  glEnd();

  // fixing colors schemes for the faces
  long rand1=color*29;
  long rand2=color*73;
  long rand3=color*159;

  // draw trinagles
  glColor3ub( rand1%256, rand2%256, rand3%256 );
  glBegin(GL_TRIANGLES);
  glVertex3fv(v1);
  glVertex3fv(v2);
  glVertex3fv(v3);
  glEnd();
}

void subdivide(float *v1, float *v2, float *v3, long depth)
{
   color++;
   GLfloat v12[3], v23[3], v31[3];
   GLint i;
   if (depth == 0) 
   {
   	 drawIcos(v1, v2, v3);
     return;
   }
   for (i = 0; i < 3; i++) 
   {
   	  // finding midpoints 
      v12[i] = 0.5*(v1[i]+v2[i]);
      v23[i] = 0.5*(v2[i]+v3[i]);
      v31[i] = 0.5*(v3[i]+v1[i]);
   }
   normalize(v12);
   normalize(v23);
   normalize(v31);
   subdivide(v1, v12, v31, depth-1);
   subdivide(v2, v23, v12, depth-1);
   subdivide(v3, v31, v23, depth-1);
   subdivide(v12, v23, v31, depth-1);
}

void display(void)
{
  static int pass;
  glEnable(GL_DEPTH_TEST);
  glEnable(GL_LINE_SMOOTH);
  glHint(GL_LINE_SMOOTH_HINT,  GL_NICEST);
  cout << "Displaying pass " << ++pass << endl;
  // clear all
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  //glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();
  gluLookAt(0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0);
  color=23;
  
  if(rotate)
  {
    static GLfloat rotX = 0.0;
    static GLfloat rotY = 0.0;
    glRotatef(rotX, 1.0, 0.0, 0.0);
    glRotatef(rotY, 0.0, 1.0, 0.0);
    rotX += 1.0;
    rotY -= 1.0;
  } 
  
  for (int i = 0; i < NFACE; i++) 
  {   
    subdivide(&vdata[tindices[i][0]][0],&vdata[tindices[i][1]][0],&vdata[tindices[i][2]][0],depth);
  }
  glutSwapBuffers();
}

void init()
{
  //select clearing (background) color
  glClearColor(0.0, 0.0, 0.0, 0.0);
  glShadeModel(GL_FLAT); 
}

void reshape(int w, int h)
{
  GLfloat aspect = (GLfloat) w / (GLfloat) h;
  glViewport(0, 0, w, h);
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  if (w <= h)
    glOrtho(-1.25, 1.25, -1.25 * aspect, 1.25 * aspect, -2.0, 2.0);
  else
    glOrtho(-1.25 * aspect, 1.25 * aspect, -1.25, 1.25, -2.0, 2.0);
  glMatrixMode(GL_MODELVIEW);
  glutPostRedisplay();
}

void timer(int)
{
  glutPostRedisplay();
  glutTimerFunc(1000.0 / updateRate, timer, 0);
}

// Test cases.  Fill in your code for each test case
void Test1()
{
  depth=0;
  rotate=false;
  glutDisplayFunc(display);
  glutReshapeFunc(reshape);
  glutMainLoop();
}

void Test2()
{
  depth=0;
  rotate=true;
  glutDisplayFunc(display);
  glutReshapeFunc(reshape);
  glutTimerFunc(1000.0 / updateRate, timer, 0);
  glutMainLoop();
}

void Test3()
{
  depth=1;
  rotate=false;
  glutDisplayFunc(display);
  glutReshapeFunc(reshape);
  glutMainLoop();
}

void Test4()
{
  depth=1;
  rotate=true;
  glutDisplayFunc(display);
  glutReshapeFunc(reshape);
  glutTimerFunc(1000.0 / updateRate, timer, 0);
  glutMainLoop();
}

void Test5(int dep)
{
  depth=dep;
  rotate=false;
  glutDisplayFunc(display);
  glutReshapeFunc(reshape);
  glutMainLoop();
}

void Test6(int dep)
{
  depth=dep;
  rotate=true;
  glutDisplayFunc(display);
  glutReshapeFunc(reshape);
  glutTimerFunc(1000.0 / updateRate, timer, 0);
  glutMainLoop();
}

int main(int argc, char** argv)
{
  if (argc < 2)
    {
      std::cout << "Usage: icosahedron testnumber" << endl;
      exit(1);
    }
  // Set the global test number
  testNumber = atol(argv[1]);
  // Initialize glut  and create your window here
  // Set your glut callbacks here
  // Enter the glut main loop here
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
  glutInitWindowSize(500, 500);
  glutInitWindowPosition(100, 100);
  glutCreateWindow("Icosa hedron");
  init();
  if      (testNumber==1)
    Test1();
  else if (testNumber==2)
    Test2();
  else if (testNumber==3)
    Test3();
  else if (testNumber==4)
    Test4();
  else if (testNumber==5)
  {
    if (argc<3)
    {
      cout<<"Usage: icosahedron testnumber depth"<<endl;
      exit(1);
    }
    Test5(atol(argv[2]));
  }
  else if (testNumber==6)
  {
    if (argc<3)
    {
      cout<<"Usage: icosahedron testnumber depth"<<endl;
      exit(1);
    }
    Test6(atol(argv[2]));
  }
  else
  {
    cout<<"Invalid test number"<<endl;
    exit(1);
  }

  return 0;

}
